object Sheet3 {
  trait Logged {
  	def log(msg: String) {
  	}
  }

  trait ConsoleLogger extends Logged {
  	override def log(msg: String) {
  			println(msg)
  	}
  }
  
  trait TimestampLogger extends Logged {
  	override def log(msg: String) {
  			super.log(new java.util.Date() + " " + msg)
  	}
  }
  
  trait ShortLogger extends Logged {
  	val maxLength = 15
  	override def log(msg: String) {
  		super.log(
  			(if(msg.length <= maxLength) msg
  			else msg.substring(0, maxLength -3) + "..."))
  	}
  }
  
  class SavingAccount extends Logged {
  	private var balance: Double = 0
  	def withdraw(amount: Double) {
  	  if(amount > balance) log("Insufficient funds")
  	  else balance -= amount
  	}
  }
  
  val acct1: SavingAccount = new SavingAccount with ConsoleLogger with TimestampLogger with ShortLogger {
  	override maxLength = 1
  }
                                                  //> acct1  : Sheet3.SavingAccount = Sheet3$$anonfun$main$1$$anon$1@61e4705b
  acct1.withdraw(1000)                            //> Mon Jun 20 17:05:36 EEST 2016 Insufficient...
  val acct2 = new SavingAccount with Logged       //> acct2  : Sheet3.SavingAccount with Sheet3.Logged = Sheet3$$anonfun$main$1$$a
                                                  //| non$2@880ec60
}