
  trait Logged {
  	def log(msg: String) {
  	}
  }

  trait ConsoleLogger extends Logged {
  	override def log(msg: String) {
  			println(msg)
  	}
  }
  
  trait TimestampLogger extends Logged {
  	override def log(msg: String) {
  			super.log(new java.util.Date() + " " + msg)
  	}
  }
  
  trait ShortLogger extends Logged {
  	val maxLength = 15
  	override def log(msg: String) {
  		super.log( 
  			if(msg.length <= maxLength) msg
  			else msg.substring(0, maxLength -3) + "...")
  		)
  	}
  }
  
  class SavingAccount extends Logged {
  	private var balance: Double = 0
  	def withdraw(amount: Double) {
  	  if(amount > balance) log("Insufficient funds")
  	  else balance -= amount
  	}
  }
  
  val acct = new SavingAccount with ConsoleLogger
  val acct2 = new SavingAccount with Logged