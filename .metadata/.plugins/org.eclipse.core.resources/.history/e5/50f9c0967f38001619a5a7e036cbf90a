object Sheet3 {
  println("Welcome to the Scala worksheet")       //> Welcome to the Scala worksheet
  abstract class Item
  case class Article(description: String, price: Double) extends Item
  case class Bundle(description: String, discount: Double, items: Item*) extends Item
  
  /**
   * The task:
   * Suppose you have a bundle made up of and article
   * and another bundle, like this:
   **/
   
  val special = Bundle("Father's day special", 20.0,
  Article("Scala for the Impatient", 39.95),
  Bundle("Anchor Distillerry Sailer", 10.0,
  Article("Old Potrero Straight Rye Whiskey", 79.95),
  Article("Junipero Gin", 32.95)))                //> special  : Sheet3.Bundle = Bundle(Father's day special,20.0,WrappedArray(Art
                                                  //| icle(Scala for the Impatient,39.95), Bundle(Anchor Distillerry Sailer,10.0,W
                                                  //| rappedArray(Article(Old Potrero Straight Rye Whiskey,79.95), Article(Juniper
                                                  //| o Gin,32.95)))))
  /**
   * Write a one-line assigment that extracts the description
   * and price of the first article:
   **/
  // my solution
  val (description, price) = special match {
  	case Bundle(_,_,f, _*) => f match {
  		case Article(d,f) => (d,f)
  	}
  }                                               //> description  : String = Scala for the Impatient
                                                  //| price  : Double = 39.95
  
  // Horstman implementation. So cool - just erase
  // everithing that is not needed. Still wonder
  // How does this work ..
  val Bundle(_,_,Article(newDescription,newPrice), _*) = special
                                                  //> newDescription  : String = Scala for the Impatient
                                                  //| newPrice  : Double = 39.95
}